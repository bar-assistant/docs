{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Usage","text":"<p>Here you can find some information about using some of the Bar Assistant features.</p>"},{"location":"#installation","title":"Installation","text":"<p>Visit setup page to view installation steps.</p>"},{"location":"#initial-bar-data","title":"Initial bar data","text":"<p>When you create a new bar, you can choose to start a bar with cocktails and ingredients already included. All that initial data is managed in a separate repository and pulled when building a docker image. You can view and contribute to that data via the Bar Assistant Public Data repository.</p>"},{"location":"#showing-what-recipes-you-can-make","title":"Showing what recipes you can make","text":"<p>All cocktails that you can make and ingredients that you have are managed via \"Shelf\". To see what recipes you can make you need to add all ingredients that you have to your shelf.</p> <ol> <li>Go to \"Ingredients\" page</li> <li>Search or create an ingredient that you want to add to your shelf</li> <li>Click \"Add to shelf\" action</li> <li>Go to \"Cocktails\" page</li> <li>In filters check \"Cocktails I can make\" checkbox</li> </ol>"},{"location":"#controlling-ingredient-matching","title":"Controlling ingredient matching","text":"<p>You can increase your available cocktail recipes in a few ways.</p> <ul> <li>You can edit cocktail recipes to include substitutes for specific ingredients. So if you have any of the substitute ingredients they will show up in your shelf.</li> <li>Use the \"Optional\" checkbox for specific ingredients. These cocktail ingredients will be ignored when matching your shelf ingredients.</li> <li>Enable \"Track parent ingredient as a substitute ingredient in your shelf\" in your profile. You can edit a specific ingredient to be a parent of some generic ingredient. This will match all ingredients that are related, for example, if \"Scotch Whiskey\" is a child ingredient of \"Whiskey\", it will try to match both of them.</li> </ul>"},{"location":"#adding-recipes","title":"Adding recipes","text":"<p>You can create new cocktail recipes by clicking \"Create cocktail\" button on \"Cocktails\" page. From that page you can manage all data related to the recipe including ingredients, tags, images and more.</p> <p>You can also import recipes through various sources. If you are missing some import options you can open a GitHub issue and describe what would you want to be added.</p>"},{"location":"#import-from-website","title":"Import from website","text":"<p>With Bar Assistant you can scrape cocktail recipes directly from the given webpage. Some websites are officially supported but Bar Assistant will try to extract recipe data from any link you give it.</p> <p>After you import recipe from the URL you will be presented with all the data that was found. Here you can double-check if everything is correct and keep it in sync with your data. Ingredients will be automatically matched by their name, if the ingredient is not found it will be created. You can also manually match ingredients.</p>"},{"location":"#recipe-collections","title":"Recipe collections","text":"<p>You can create a recipe collection in a few ways.</p> <p>By manually creating collections via the \"Collections\" page. Then you can go to a single cocktail recipe and in the actions dropdown select \"Add to collection\". You can also create a new collection directly from dialog that shows up.</p> <p>To add multiple recipes to collection you can use \"Cocktails\" page to filter what cocktails you want to add and then click \"Add to collection\" button in top right.</p> <p>If you want to share your collection with all the members in the bar you can enable that on \"Collections\" page when you edit a specific collection. All shared collections will be shown in the filter sidebar od \"Cocktails\" page.</p>"},{"location":"#searching-and-filtering","title":"Searching and filtering","text":"<p>You can use global search that is always available when you click \"Search\" in site header. This search is fast and powered by Meilisearch. From here you can also filter ingredients and cocktails.</p> <p>You can also be more specific with filters when you are on main resource page.</p> <p>Available cocktail filters:</p> <ul> <li>Cocktails you can make</li> <li>Favorites</li> <li>Cocktails with a public link</li> <li>Collections - including your and other bar members collections</li> <li>Recipes added by specific users</li> <li>Main ingredient - The ingredient that is in first place in the cocktail recipe is marked as the main ingredient</li> <li>Cocktail preparation method</li> <li>Cocktail strength by ABV</li> <li>Custom tags you've added</li> <li>Glass type</li> <li>Total number of ingredients</li> <li>By ratings</li> </ul> <p>Available ingredient filters:</p> <ul> <li>Ingredients in your shelf</li> <li>Ingredients on your shopping list</li> <li>Ingredients used as main ingredient</li> <li>Category</li> <li>Strength</li> </ul> <p>These facets combined with custom sorting give you powerful filtering capabilities.</p>"},{"location":"#sharing-recipes","title":"Sharing recipes","text":"<p>Bar Assistant allows you to share recipes in a few ways. All actions are available on a specific cocktail recipe page.</p> <ul> <li>Print recipe - This shows you print-friendly page with the recipe information</li> <li>Create public link - This will create a public link which you can share with your friends</li> <li>Generate recipe image - Create a recipe image that you can share with your friends</li> <li>Copy as JSON - This will copy recipe in a specific format which you can use to import it into another bar</li> <li>Copy as YAML/XML/Markdown/JSON-LD - This will copy recipe information in selected format</li> </ul>"},{"location":"#user-roles","title":"User roles","text":"<p>There is a few user roles in the Bar Assistant.</p> <p>Admin</p> <p>Complete access to bar actions. Can't delete the bar.</p> <p>Moderator</p> <p>Can manage cocktails and ingredients. Can manage bar settings except bar members.</p> <p>General</p> <p>Can manage cocktails and ingredients.</p> <p>Guest</p> <p>Can only view, favorite and rate recipes and ingredients. Can also create collections.</p> <p>Bar owner</p> <p>User that created the bar.</p> <p>Bar member</p> <p>User that has any membership in the bar.</p> <p>Warning</p> <p>Keep in mind that the user that created the bar can delete it at any point (independent of the role he has). Deleting the bar also deletes all the recipes and ingredients that members added.</p>"},{"location":"#bar","title":"Bar","text":"Action Allowed roles Create Anyone registered View Bar members Edit Bar owner, admin Delete Bar owner Remove members Bar owner, admin Active/Deactivate Bar owner Create exports Bar owner Manage bar shelf Bar owner, admin, moderator"},{"location":"#methods-tags-utensils-ingredient-categories-glass-types-price-categories","title":"Methods, Tags, Utensils, Ingredient categories, Glass types, Price categories","text":"Action Allowed roles Create Admin, moderator View Bar members Edit Admin, moderator Delete Admin, moderator"},{"location":"#cocktails","title":"Cocktails","text":"Action Allowed roles Create Admin, moderator, general View Bar members Edit Cocktail author, admin, moderator Delete Cocktail author, admin, moderator Create public link Cocktail author, admin, moderator Rate Bar members Add notes Bar members"},{"location":"#ingredients","title":"Ingredients","text":"Action Allowed roles Create Admin, moderator, general View Bar members Edit Cocktail author, admin, moderator Delete Cocktail author, admin, moderator"},{"location":"#users","title":"Users","text":"Action Allowed roles Create Admin, moderator View Admin, moderator Edit Admin, moderator Delete User can delete his own account"},{"location":"data/","title":"Data management","text":"<p>Being in control of your data is one of the most important parts of Bar Assistant. That's why there are several ways to export your data into human and machine readable formats.</p>"},{"location":"data/#export-data-types","title":"Export data types","text":"<p>Here's a quick summary of all data export types. All types have recipes grouped into folders, with cocktail name (slug) being the folder name. Images are included in the root of the recipe folder.</p> Type Description CLI/API type Datapack Exports bar data(1) in JSON format, which you can use to import bar data into another Bar Assistant instance <code>datapack</code> JSON Exports all recipes, with recipe being a valid JSON schema <code>json</code> Markdown Exports all recipes, with recipe in Markdown format <code>markdown</code> XML Exports all recipes, with recipe in XML format <code>xml</code> JSON-LD Exports all recipes, with recipe in Schema.org Recipe type <code>json-ld</code> YAML Same structure as JSON, but in YAML format <code>yaml</code> <p>(1) Bar data includes cocktails, ingredients, methods, tags, utensils, glass types, ingredient categories, and price categories.</p> <p>You can also force conversion of cocktail ingredients to a specific unit (if applicable). Available arguments for units is: <code>none</code>, <code>ml</code>, <code>cl</code>, <code>oz</code>.</p>"},{"location":"data/#exporting-data","title":"Exporting data","text":""},{"location":"data/#via-cli-server-owners","title":"Via CLI (Server owners)","text":"<p>You can export all cocktail recipes from your bar by using the CLI. Run <code>php artisan bar:export-recipes --help</code> to see all available options.</p> <p>Here's an example using default docker setup:</p> <ul> <li>If you know ID of a bar you want to export recipes from, you can provide it as an argument to the command.</li> </ul> <pre><code>$ docker compose exec bar-assistant php artisan bar:export-recipes {barId}\n</code></pre> <p>Otherwise, you can run the command without <code>{barId}</code> argument, and you will be able to search for a bar to export recipes from.</p> <ul> <li>You will see a succseful message with the path to the exported file.</li> </ul>"},{"location":"data/#via-api","title":"Via API","text":"<p>You can use CURL or any other HTTP client to export data.</p> <pre><code>curl --request POST \\\n  --url http://{your-url}/api/exports \\\n  --header 'Accept: application/json' \\\n  --header 'Authorization: Bearer {your-token}' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"type\": \"datapack\",\n  \"bar_id\": {your-bar-id}\n}'\n</code></pre>"},{"location":"data/#via-web-ui","title":"Via Web UI","text":"<p>If you are using Salt Rim, you can use the Exports page in the settings.</p>"},{"location":"data/#importing-data","title":"Importing data","text":""},{"location":"data/#import-from-datapack-zip-server","title":"Import from datapack .zip (Server)","text":"<p>If you previously exported recipes with <code>php artisan bar:export-recipes {barId}</code> command, you can use <code>php artisan bar:import-zip {path}</code> command to import those recipes. You will have to provide either an existing bar id or you will have the option to create a new one.</p> <p>You can also import any .zip file you put in backups folder. Here's an example with docker compose:</p> <ol> <li>Move .zip file with recipes into backups folder. This folder should be available to you if you mounted it as volume, inside container its located at <code>/var/www/cocktails/storage/bar-assistant/backups</code>.</li> <li>Run the following command with .zip path relative to mounted storage folder: <code>docker compose exec app php artisan bar:import-recipes backups/my-recipes.zip</code></li> <li>Follow on screen instructions</li> </ol>"},{"location":"data/#deleting-users-server","title":"Deleting users (Server)","text":"<p>When a user deletes his account, to keep data integrity, all his account data gets anonymized. If you want to completely delete a user you can use the following command: <code>php artisan bar:delete-user {email}</code>. This will delete user and all his data, including cocktails, bars and ingredients he created.</p>"},{"location":"data/#full-backup-via-cli","title":"Full backup via CLI","text":"<p>If you want to backup all your data to a .zip file, you can use the following command: <pre><code>$ docker compose exec bar-assistant php artisan bar:full-backup\n</code></pre></p> <p>This will create a .zip file with all your data and will be located at <code>storage/bar-assistant/backups</code> folder.</p>"},{"location":"data/#meilisearch-data-backup","title":"Meilisearch data backup","text":"<p>There is currently no point in backing up the Meilisearch data unless you are using custom API keys. When you restart Bar Assistant container the data gets automatically synced with Meilisearch.</p>"},{"location":"faq/","title":"FAQ","text":"<p>Here you can find frequently asked questions and their answers.</p>"},{"location":"faq/#why-do-i-get-unable-to-connect-to-x-api-server-on-a-login-page","title":"Why do I get \"Unable to connect to X API server.\" on a login page?","text":"<p>This usually means that the client can't reach the API server. There could be a few reasons for this:</p> <ul> <li>The API server is not running<ul> <li>Restart the API server</li> <li>Check docker logs for errors</li> </ul> </li> <li>The API server is running but your browser can't reach it<ul> <li>Check that the API server is reachable from your browser.</li> <li>Example using default setup: When you visit \"http://localhost:3000/bar\" you should see: \"This is your Bar Assistant instance.\" message.</li> </ul> </li> </ul>"},{"location":"faq/#why-am-i-missing-some-features-in-web-app","title":"Why am I missing some features in web app?","text":"<p>Salt Rim uses background workers to power the web frontend and PWA and the browser usually caches files related to this. To verify that you have a cache issue try another browser or your current browser's incognito mode to check out the frontend.</p> <p>Also, some features require the client to be running in HTTPS context:</p> <ul> <li>Copying recipes to clipboard</li> <li>Prevent screen locking</li> </ul>"},{"location":"faq/#why-is-my-site-search-ingredient-search-not-working","title":"Why is my site search / ingredient search not working?","text":"<p>In general two things can happen, usually after updating Meilisearch, tokens are out of date, or indexes are empty.</p> <p>Client search tokens are generated from API key provided by Meilisearch. To get the fresh tokens follow the steps below:</p> <ol> <li>Force update search tokens for all bars: <code>docker compose exec bar-assistant php artisan bar:setup-meilisearch -f</code>.</li> <li>Sign out of the salt-rim client and sign back in.</li> <li>Sync search indexes:<ul> <li>To sync a single bar, go to bars, click edit bar, then click <code>Optimize bar</code></li> <li>To sync all bars, run <code>docker compose exec bar-assistant php artisan bar:refresh-search</code></li> </ul> </li> <li>Reselect your bar, and check if the search is working</li> </ol>"},{"location":"faq/#how-do-i-disable-user-registrations","title":"How do I disable user registrations?","text":"<p>You can disable <code>/register</code> endpoint with environment variable.</p> <pre><code>ALLOW_REGISTRATION=false\n</code></pre>"},{"location":"faq/#how-do-i-backup-my-data","title":"How do I backup my data?","text":"<p>To create a full backup of your data, you can use the CLI commands.</p> <pre><code>$ docker compose exec bar-assistant php artisan bar:full-backup\n</code></pre> <p>This will create a backup file in the volume you mounted. Path to the .zip file should be printed by command.</p> <p>This is a full \"file\" backup of your data, which includes the current database file, and the whole uploads directory.</p>"},{"location":"faq/#how-do-i-update-meilisearch","title":"How do I update Meilisearch?","text":""},{"location":"faq/#the-easy-way","title":"The easy way","text":"<p>Everytime you restart Bar Assistant container the cocktail and ingredient data gets synced with Meilisearch. So the easiest way to update the Meilisearch is to delete the container and the related volume, and create a new one. Update your <code>docker-compose.yml</code> file with new Meilisearch version, and run the following commands.</p> <pre><code># Stop the container\n$ docker compose stop meilisearch\n# Remove the container and related volume, double check if volume is deleted\n$ docker compose rm meilisearch -v\n# Pull new images\n$ docker compose pull\n# Restart the stack\n$ docker compose restart\n</code></pre> <p>If there are any issues, you should try logging out and reselecting the bar, this should update search token for the specific bar.</p>"},{"location":"faq/#the-proper-way","title":"The \"proper\" way","text":"<p>If, for some reason, you need all the current data in the Meilisearch, you can follow the official guide on how to update.</p> <p>To update your Meilisearch instance, you first need to create a dump of your database. Then follow the rest of the instructions on the Meilisearch docs.</p>"},{"location":"faq/#how-do-i-check-logs","title":"How do I check logs?","text":"<p>Most of the logs are available in docker output. Depending on the configuration, some Bar Assistant specific logs are also written inside the container in the file: <code>/var/www/cocktails/storage/logs/laravel.log</code>.</p> <pre><code>$ docker compose logs bar-assistant\n$ docker compose logs salt-rim\n</code></pre>"},{"location":"faq/#where-can-i-find-api-documentation","title":"Where can I find API documentation?","text":"<p>Visit <code>/docs</code> path on your API instance, ex: https://your-bar-api-server.com/docs</p>"},{"location":"faq/#where-do-i-find-more-recipes","title":"Where do I find more recipes?","text":"<p>Some of Bar Assistant community members are hosting their recipe databases:</p> <ul> <li>zhdenny/bar_assistant_database</li> <li>bar-assistant/data</li> </ul> <p>Or you can visit some of sites that Bar Assistant can import recipes from. The following sites are officially supported. For unsupported sites, we fallback to Schema.org structured data which most of the recipe websites support.</p> <ul> <li>PunchDrink</li> <li>Imbibe</li> <li>Liquor.com</li> <li>CocktailParty</li> <li>CocktailExplorer</li> <li>CocktailsDistilled</li> <li>CraftedPour</li> <li>DiffordsGuide</li> <li>EricsCocktailGuide</li> <li>HausAlpenz</li> <li>KindredCocktails</li> <li>LiberAndCo</li> <li>MakeMeACocktail</li> <li>SteveTheBartender</li> <li>TheCocktailDB</li> <li>TuxedoNo2</li> </ul>"},{"location":"setup/","title":"Installation (Docker)","text":"<p>This is recommended way of installation. This will get you running with the following services on your localhost:</p> <ul> <li>Bar Assistant API server</li> <li>Salt Rim web client</li> <li>Meilisearch service for searching and filtering</li> <li>Optional Redis service for caching and sessions</li> </ul>"},{"location":"setup/#docker-compose","title":"Docker Compose","text":"<p>Docker compose example repository can be found here.</p>"},{"location":"setup/#step-1-create-required-files","title":"Step 1: Create required files","text":"<p>Docker Compose setup requires a few setup files. First, create the <code>.env</code> file and <code>docker-compose.yml</code> files. The .env file will contain your basic configuration variables.</p> .env<pre><code># Your Meilisearch master key (https://docs.meilisearch.com/learn/getting_started/quick_start.html#securing-meilisearch)\nMEILI_MASTER_KEY=masterKey-make-it-long-for-security\n\n# Meilisearch server instance URL\nMEILISEARCH_URL=http://localhost:8081\n\n# Bar Assistant server instance URL\nAPI_URL=http://localhost:8082\n</code></pre> <p>Then in your <code>docker-compose.yml</code> copy and paste the following.</p> docker-compose.yml<pre><code>volumes:\n  bar_data:\n  meilisearch_data:\n\nservices:\n  meilisearch:\n    image: getmeili/meilisearch:v1.15 # Never use latest tag\n    environment:\n      - MEILI_NO_ANALYTICS=true\n      - MEILI_MASTER_KEY=$MEILI_MASTER_KEY\n      - MEILI_ENV=production\n    restart: unless-stopped\n    volumes:\n      - meilisearch_data:/meili_data\n    ports:\n      - \"8081:7700\"\n\n  # Optional, but recommended\n  redis:\n    image: redis\n    environment:\n      - ALLOW_EMPTY_PASSWORD=yes\n    restart: unless-stopped\n\n  bar-assistant:\n    image: barassistant/server:v5\n    depends_on:\n      - meilisearch\n      - redis # Remove if not using redis\n    environment:\n      - APP_URL=$API_URL\n      - MEILISEARCH_KEY=$MEILI_MASTER_KEY\n      - MEILISEARCH_HOST=http://meilisearch:7700\n      - REDIS_HOST=redis # Remove if not using redis\n      - CACHE_DRIVER=redis # Change to \"file\" if not using redis\n      - SESSION_DRIVER=redis # Change to \"file\" if not using redis\n      - ALLOW_REGISTRATION=true\n    restart: unless-stopped\n    ports:\n      - \"8082:8080\"\n    volumes:\n      - bar_data:/var/www/cocktails/storage/bar-assistant\n\n  salt-rim:\n    image: barassistant/salt-rim:v4\n    depends_on:\n      - bar-assistant\n    environment:\n      - API_URL=$API_URL\n      - MEILISEARCH_URL=$MEILISEARCH_URL\n    restart: unless-stopped\n    ports:\n      - \"8080:8080\"\n</code></pre> <p>Info</p> <p>If you want to use a bind mounts, you need to make sure that the folder is owned by the user that is running the container, in this case <code>33:33</code> (www-data). You can do this by running <code>chown -R 33:33 /path/to/folder</code> and then restarting the container.</p> <p>Warning</p> <p>If you are using rootless docker and want to use bind mounts, you will need to manually set the correct user permissions on your host folder. In most cases this will be <code>100032:100032</code> but it can vary depending on your docker setup. Learn more about this here.</p>"},{"location":"setup/#step-2-run-the-stack","title":"Step 2: Run the stack","text":"<p>Once you have all those files in a directory, you can run everything with <code>docker compose up -d</code>. After everything is up and running you can now access the browser client on URL and port that you defined. By default this will be localhost:8080.</p> <p>Please, note that it can sometimes take a minute or more (depending on the hardware) for the server to start. You can check your docker logs (<code>$ docker compose logs bar-assistant</code>) for \"Application ready\" message.</p> <p>Before you login you need to create a new user, you can do that by clicking register button.</p>"},{"location":"setup/#container-images","title":"Container images","text":"<p>Bar Assistant is available as a Docker image on Docker Hub and GitHub Container Registry. There is no <code>latest</code> tag, so you need to specify version in the tag. For example:</p> <ul> <li><code>barassistant/server:v4.4.1</code> - This will pull the exact version</li> <li><code>barassistant/server:v4.4</code> - This will pull the latest minor release</li> <li><code>barassistant/server:v4</code> - This will pull the latest major release</li> <li><code>barassistant/server:dev</code> - This will pull the latest development release (unstable and not recommended)</li> </ul>"},{"location":"setup/#updating","title":"Updating","text":"<p>You can update by pulling the newest images and restarting the stack.</p> <pre><code># Pull images\n$ docker compose pull\n# Run the stack\n$ docker compose up -d\n</code></pre>"},{"location":"setup/#reverse-proxy-configuration","title":"Reverse proxy configuration","text":"<p>Currently the setup requires that you proxy 3 services. This can be done with Nginx, Caddy, or any other reverse proxy server. Don't forget to update your <code>.env</code> file with the correct URLs.</p>"},{"location":"setup/#nginx-config-example-with-subfolders","title":"Nginx config example with subfolders","text":"<p>Here's an example of how to setup nginx configuration that will expose the services as subfolders of your domain. This is useful if you want to run multiple services on the same domain.</p> nginx.conf<pre><code># This assumes that your proxy service is capable of resolving the container hostnames\nserver {\n    server_name bar.mydomain.com;\n\n    location /bar/ {\n        proxy_pass http://bar-assistant:8080/;\n    }\n\n    location /search/ {\n        proxy_pass http://meilisearch:7700/;\n    }\n\n    location / {\n        proxy_pass http://salt-rim:8080/;\n    }\n}\n</code></pre>"},{"location":"setup/#nginx-config-example-with-subdomains","title":"Nginx config example with subdomains","text":"<p>Here's an example of how to setup nginx configuration that will expose the services as subdomains of your domain. This is useful if you want to run each service on a separate subdomain.</p> nginx.conf<pre><code># This assumes that your proxy service is capable of resolving the container hostnames\nserver {\n  server_name api.example.com;\n\n  location / {\n    proxy_pass http://bar-assistant:8080/;\n  }\n}\nserver {\n  server_name search.example.com;\n\n  location / {\n    proxy_pass http://meilisearch:7700/;\n  }\n}\nserver {\n  server_name my-bar.example.com;\n\n  location / {\n    proxy_pass http://salt-rim:8080/;\n  }\n}\n</code></pre>"},{"location":"setup/#caddy-config-example-with-subdomains","title":"Caddy config example with subdomains","text":"<p>This is an example of Caddyfile configuration that will expose the services as subdomains of your domain. Caddy is a modern web server that automatically handles HTTPS for you.</p> Caddyfile<pre><code># This assumes that your proxy service is capable of resolving the container hostnames\napi.example.com {\n    reverse_proxy bar-assistant:8080\n}\nsearch.example.com {\n    reverse_proxy meilisearch:7700\n}\nmy-bar.example.com {\n    reverse_proxy salt-rim:8080\n}\n</code></pre>"},{"location":"setup/ai-setup/","title":"AI Integration","text":"<p>Since version v4.7.0 Salt Rim client supports generative AI features.</p> <p>Enabled features:</p> <ul> <li>Automatic tag creation for cocktail recipes</li> <li>Automatic ingredient details suggestions (description, origin, color...)</li> </ul> <p>More features can be suggested by opening a GitHub issue.</p>"},{"location":"setup/ai-setup/#supported-providers","title":"Supported providers","text":"<p>To use AI features in Salt Rim, you need to set up an AI provider. Currently the supported providers include:</p> <ul> <li>Ollama via <code>ollama</code> provider settings<ul> <li>Keep in mind that you need to properly configure Ollama.</li> </ul> </li> <li>LM Studio via <code>lmstudio</code> provider settings</li> </ul> <p>Unsupported providers will fallback to openai compatibile API.</p> <p>To enable AI integration, you need to setup salt-rim environment variables. Here's an example of how to set them up in a default compose file:</p> docker-compose.yml<pre><code>salt-rim:\n    environment:\n      - AI_PROVIDER=\"ollama\"\n      - AI_HOST=\"http://localhost:11434\"\n      - AI_MODEL=\"gemma3\"\n      - AI_API_KEY=\"add-if-required\"\n</code></pre> <p>When you're done with the setup, you can visit your Salt Rim instance and check if the AI features are enabled. You can do that on the following pages:</p> <ul> <li>Cocktail edit/create form page:<ul> <li>AI generate button will show up in the tags input field after you fill some basic information about the cocktail.</li> </ul> </li> <li>Ingredient edit/create form page:<ul> <li>AI generate button will show up in the name input field after you fill in the name of the ingredient.</li> </ul> </li> </ul>"},{"location":"setup/development/","title":"Development setup","text":"<p>The easiest way to setup your development environment is with Docker. Bar Assistant repository comes with development <code>docker-compose.yml</code> file.</p> <ol> <li>Clone the repository</li> <li>Copy <code>.env.dev</code> as <code>.env</code>, or setup your own env file</li> <li>Run <code>docker compose up -d</code></li> <li>Run the following commands to get the app running: <pre><code>$ touch storage/bar-assistant/database.ba3.sqlite\n$ docker compose exec app composer install\n$ docker compose exec app php artisan key:generate\n$ docker compose exec app php artisan storage:link\n$ docker compose exec app php artisan migrate\n</code></pre></li> <li>(Optional) Add bar data <pre><code>$ git clone https://github.com/bar-assistant/data.git resources/data\n</code></pre></li> </ol>"},{"location":"setup/development/#code-quality","title":"Code quality","text":"<p>The following commands should all pass before you push the changes:</p> <pre><code># Run checkstyle\n$ docker compose exec app composer fix-style\n# Run PHPStan checks\n$ docker compose exec app composer static\n# Run the test suite\n$ docker compose exec app php artisan test\n</code></pre>"},{"location":"setup/mailing/","title":"Mail setup","text":"<p>Since version v3.3.0 Bar Assistant can send emails if you have the correct configuration. This is not required but enables a few features like:</p> <ul> <li>Request users to verify their email before allowing them to authenticate</li> <li>Sending password forgot and reset emails</li> </ul>"},{"location":"setup/mailing/#docker-setup","title":"Docker setup","text":"<p>Bar Assistant supports the following drivers:</p> <ul> <li>Log driver - Sends emails to a log file. Setup by setting the ENV variable <code>MAIL_MAILER=log</code>. No other configuration is needed.</li> <li>SMTP driver - Sends emails via SMTP server. Setup by setting the ENV variable <code>MAIL_MAILER=smtp</code>.</li> </ul> <p>To enable email sending via SMTP you need to setup the following ENV variables:</p> Example .env with SMTP configuration<pre><code>MAIL_MAILER=smtp\n# SMTP hostname\nMAIL_HOST=smtp.myserver.com\n# SMTP port\nMAIL_PORT=2525\n# SMTP encryption\nMAIL_ENCRYPTION=tls\n# SMTP username\nMAIL_USERNAME=mailuser\n# SMTP password\nMAIL_PASSWORD=mailpassword\n</code></pre> <p>And the following ENV variables on salt-rim:</p> Salt Rim client .env<pre><code>MAILS_ENABLED=true\n</code></pre> <p>The rest of the variables that are related are the following:</p> <ul> <li><code>MAIL_REQUIRE_CONFIRMATION=true</code> - Enabling this will require users to confirm email before being able to authenticate. (Default: <code>false</code>).</li> <li><code>MAIL_CONFIRM_URL=\"https://your-frontend.url/confirmation/[id]/[hash]\"</code> - URL that handles email confirmation on your frontend/client. This is the URL that gets sent in the email. The <code>[id]</code> and <code>[hash]</code> placeholders gets replaced with the user ID and confirmation hash. (Default: <code>\"\"</code>).</li> <li><code>MAIL_RESET_URL=\"https://your-frontend.url/reset-password?token=[token]\"</code> - URL that handles password reset on your frontend/client. This is the URL that gets sent in the email. The <code>[token]</code> placeholder gets replaced with the actual reset password token. (Default: <code>\"\"</code>).</li> <li><code>MAIL_FROM_ADDRESS=\"no-reply@barassistant.app\"</code> - Email from address. (Default: <code>\"\"</code>).</li> <li><code>MAIL_FROM_NAME=\"Bar Assistant\"</code> - Email from name. (Default: <code>\"\"</code>).</li> </ul>"},{"location":"setup/migrate-to-15/","title":"Migration - v1.x to v1.5","text":"<p>Bar Assistant version 1.5 includes an overhaul of docker image:</p> <ul> <li>Now using PHP-fpm and Nginx</li> <li>New volume mapping: <code>/var/www/cocktails/storage/bar-assistant</code></li> <li>Improved error logging</li> <li>Included docker compose configuration now exposes only one service</li> <li>Updated Meilisearch to stable version (1.0)</li> </ul> <p>The basic migration steps are:</p> <ul> <li>Backup old data into a single folder</li> <li>Remove old services</li> <li>Switch to new configration</li> <li>Use the folder with backup data as a volume</li> <li>Start the services</li> <li>Update Meilisearch user API keys</li> </ul>"},{"location":"setup/migrate-to-15/#step-1-backup-your-existing-data","title":"Step 1: Backup your existing data","text":"<p>Go into your existing docker compose folder and run the following commands:</p> <pre><code># First create a folder that will store your backup\n$ mkdir my-bar-data\n# Backup database\n$ docker compose cp bar-assistant:/var/www/cocktails/storage/database.sqlite ./my-bar-data/database.sqlite\n# Backup images\n$ docker compose cp bar-assistant:/var/www/cocktails/storage/uploads ./my-bar-data\n</code></pre> <p>You should now have a directory <code>my-bar-data</code> in your docker compose folder with the following contents: <code>database.sqlite</code> and <code>uploads/</code> folder.</p> <p>This is the most important step, as long as you don't lose this folder your data is safe.</p>"},{"location":"setup/migrate-to-15/#step-2-stop-old-services","title":"Step 2: Stop old services","text":"<p>We can remove/change the data volume attached to meilisearch since all the data will be re-synced when Bar Assistant server starts.</p> <pre><code># Remove volume related to Meilisearch\n$ docker compose rm -s -v meilisearch\n\n# Stop and remove services\n$ docker compose down\n</code></pre>"},{"location":"setup/migrate-to-15/#step-3-update-your-compose-file","title":"Step 3: Update your compose file","text":"<p>Use the example from the setup guide.</p> <p>The only changes you need to do is to update volume configuration to use your backup folder, and update exposed port of the webserver service.</p> docker-compose.yml<pre><code># ...\n    restart: unless-stopped\n    volumes:\n      - ./my-bar-data:/var/www/cocktails/storage/bar-assistant\n# ...\n  webserver:\n    image: nginx:alpine\n    restart: unless-stopped\n    ports:\n      - 3000:3000\n# ...\n</code></pre>"},{"location":"setup/migrate-to-15/#step-4-run-the-containers","title":"Step 4: Run the containers","text":"<p>Before running the containers, make sure you set permissions for your backup folder to user <code>33</code> (www-data).</p> <pre><code>$ sudo chown -R 33:33 my-bar-data\n</code></pre> <p>Then run the container.</p> <pre><code>$ docker compose up -d\n</code></pre> <p>When the services are up, make sure to update API keys.</p> <pre><code>$ docker compose exec bar-assistant php artisan bar:refresh-user-search-keys\n</code></pre>"},{"location":"setup/migrate-to-30/","title":"Migration - v2.x to v3.x","text":"<p>If you are using docker compose this process is really simple.</p> <p>First make sure you are on latest v2.x version (v2.6.0 at the time of writing).</p> <p>Update your docker compose with new versions.</p> <pre><code># For bar assistant server\nimage: barassistant/server:v3\n# For salt rim\nimage: barassistant/salt-rim:v2\n</code></pre> <p>Then pull and restart the stack:</p> <pre><code>$ docker compose pull\n$ docker compose up -d\n</code></pre> <p>On first start your current data will be backed up to <code>your-volume/bar-assistant/backup_v2.zip</code>, then the migration will start. If something goes wrong you can downgrade to last version and restore the backup.</p>"},{"location":"setup/migrate-to-30/#manual-instructions-for-installs-from-source","title":"Manual instructions for installs from source","text":"<p>If you are using SQLite with non standard database locations (meaning, not: <code>storage/bar-assistant/database.sqlite</code>), the easiest way to migrate is to copy your database to the standard location and run the migrations.</p>"},{"location":"setup/migrate-to-40/","title":"Migration - v3.x to v4.0.0","text":""},{"location":"setup/migrate-to-40/#prerequisites","title":"Prerequisites","text":"<ul> <li>You are on latest v3.x version.</li> <li>You have backups of your data.</li> </ul>"},{"location":"setup/migrate-to-40/#1-update-folder-permissions","title":"1. Update folder permissions","text":"<p>One of the biggest changes in v4.0.0 is that the API docker image is unprivileged by default. This should improve security but comes with some caveats, mostly related to the file permissions. Since now we can't rely on the container to update file permissions in runtime, you will need to manually update the permissions of the files in some cases.</p> <p>There are two possible scenarios, depending on your setup/preferences, you are using bind mounts or named volumes.</p> <ul> <li>Bind mounts are local folders that are mounted from the host machine to container (for example: <code>./local-folder:/var/www/cocktails/storage/bar-assistant</code>).</li> <li>Volumes are named volumes managed by docker (for example: <code>my-named-volume:/var/www/cocktails/storage/bar-assistant</code>).</li> </ul>"},{"location":"setup/migrate-to-40/#1a-bind-mounts","title":"1a. Bind mounts","text":"<p>If you are using bind mounts, you need to make sure that the folder is owned by the user that is running the container, in this case <code>33:33</code> (www-data).</p> <p>For the following example setup: <code>./local-folder:/var/www/cocktails/storage/bar-assistant</code>, you would run the following command on your host machine:</p> <pre><code># Update local folder permissions, may require sudo\n$ chown -R 33:33 ./local-folder\n</code></pre> <p>If you are using rootless docker this get a bit more complicated. You need to find what the pid and gid of the user inside the container is. And then you need to <code>chown</code> the folder to that user. In most cases this will be <code>100032:100032</code> but it can vary depending on your docker setup. Learn more about this here.</p>"},{"location":"setup/migrate-to-40/#1b-volumes","title":"1b. Volumes","text":"<p>To change the permissions for bar-assistant folder in a named volume, you need to run the following command:</p> <pre><code>docker compose exec bar-assistant chown -R 33:33 storage/bar-assistant\n</code></pre>"},{"location":"setup/migrate-to-40/#2-update-default-port","title":"2. Update default port","text":"<p>Bar Assistant container now exposes port <code>8080</code> instead of <code>3000</code>. So you need to update your nginx config. Find the line that sets the Bar Assistant proxy pass in your <code>nginx.conf</code> and change it to:</p> <pre><code>location /bar/ {\n    proxy_pass http://bar-assistant:8080/;\n}\n</code></pre>"},{"location":"setup/migrate-to-40/#3-update-docker-compose","title":"3. Update docker compose","text":"<p>Update the docker compose file to use the new images:</p> <pre><code># For bar assistant server\nimage: barassistant/server:v4\n# For salt rim\nimage: barassistant/salt-rim:v3\n</code></pre> <p>Then pull and restart the stack:</p> <pre><code>$ docker compose pull\n$ docker compose up -d\n</code></pre> <p>Tip</p> <p>Please note that you will need to clear your site cache and logout for the frontend to refresh properly.</p>"},{"location":"setup/migrate-to-40/#4-other-changes","title":"4. Other changes","text":"<p>The following ENV variables are not required anymore, and can be safely removed from your docker-compose file: <code>LOG_CHANNEL</code>, <code>DEFAULT_LOCALE</code>.</p> <p>Also, redis is now optional (but recommended) service, check the installation docs for more information.</p>"},{"location":"setup/migrate-to-50/","title":"Migration - v4.x to v5.0.0","text":""},{"location":"setup/migrate-to-50/#prerequisites","title":"Prerequisites","text":"<ul> <li>You are on latest v4.x version.</li> <li>You have backups of your data.</li> </ul> <p>If you are using docker this process is simple. This version does not require any major changes to your docker-compose file.</p> <pre><code># Bump your bar assistant image version\nimage: barassistant/server:v5\n# Bump your salt-rim image version\nimage: barassistant/salt-rim:v4\n</code></pre> <p>Then pull and restart the stack:</p> <pre><code>$ docker compose pull\n$ docker compose up -d\n</code></pre>"},{"location":"setup/source-install/","title":"Installation (Source)","text":"<p>Please note, you should be familiar with linux server setup.</p> <p>Bar Assistant is made with Laravel, you can check out default laravel requirements here. A few extra prerequisites are:</p> <ul> <li>You have <code>git</code> installed</li> <li>You have installed PHP &gt;= 8.3 with the following extensions:<ul> <li>ffi</li> <li>opcache</li> <li>redis</li> <li>zip</li> <li>sqlite</li> <li>bcmath</li> <li>int</li> </ul> </li> <li>You have Composer installed</li> <li>You have <code>sqlite3</code> installed</li> <li>You have meilisearch running somewhere.</li> <li>(Optional) You have Redis server instance running</li> </ul>"},{"location":"setup/source-install/#1-setup-the-api","title":"1. Setup the API","text":"<p>Clone the bar-assistant repository and create <code>.env</code> file.</p> <p><pre><code>$ cp .env.dist .env\n</code></pre> Update the required variables:</p> .env<pre><code># Your application instance URL\nAPP_URL=\nREDIS_HOST=127.0.0.1\nREDIS_PASSWORD=null\nREDIS_PORT=6379\nCACHE_DRIVER=redis\nSESSION_DRIVER=redis\n</code></pre>"},{"location":"setup/source-install/#2-install-dependencies","title":"2. Install dependencies","text":"<p>Use Composer to install the required dependencies.</p> <pre><code># Install dependecies\n$ composer install\n</code></pre>"},{"location":"setup/source-install/#3-setup-the-rest-of-the-application","title":"3. Setup the rest of the application","text":"<p>Now you should be able to use <code>artisan</code> commands to setup the rest of the application.</p> <pre><code># Generate a key\nphp artisan key:generate\n\n# To setup the database:\nphp artisan migrate --force\n\n# To setup correct image paths\nphp artisan storage:link\n\n# Clear config cache so new ENV settings get picked up\nphp artisan config:clear\n\n# Setup search engine\nphp artisan bar:setup-meilisearch\nphp artisan scout:sync-index-settings\n\n# Warmup cache\nphp artisan config:cache\nphp artisan route:cache\nphp artisan event:cache\n\n# Clear expired tokens\nphp artisan sanctum:prune-expired --hours=24\n\n# Sync base recipes\ngit clone --depth 1 --branch v5 https://github.com/bar-assistant/data.git resources/data\n</code></pre> <p>You can now configure your webserver to serve the PHP files from the <code>public</code> folder. An example config with ngnix is available here.</p>"},{"location":"setup/source-install/#4-install-web-client","title":"4. Install web client","text":"<p>After cloning the Salt Rim repository do the following.</p> <ol> <li>Install dependencies with <code>npm install</code></li> <li>Add a config file to public folder: <code>public/config.js</code> <pre><code>window.srConfig = {}\nwindow.srConfig.API_URL = \"http://my-bar.com\"\nwindow.srConfig.MEILISEARCH_URL = \"http://my-milisearch.com\"\n</code></pre></li> <li>Build for production by running <code>npm run build</code></li> <li>Now you have a <code>dist/</code> folder. You can configure your webserver to serve static files from this folder.</li> </ol>"},{"location":"setup/sso/","title":"SSO / OAuth setup","text":"<p>Since version v5.0.0 Bar Assistant has support for Single Sign On (SSO).</p> <p>Bar Assistant currently supports the following SSO providers:</p> <ul> <li>Google</li> <li>GitHub</li> <li>GitLab</li> <li>Authelia</li> <li>Authentik</li> <li>Keycloak</li> <li>PocketId</li> </ul> <p>More SSO providers can be implmented by opening a GitHub issue.</p>"},{"location":"setup/sso/#enabling-providers","title":"Enabling providers","text":"<p>To enable SSO you need to set the following ENV variables depending on the provider you want to use.</p> .env<pre><code># To enable Google set the following:\nGOOGLE_CLIENT_ID=\nGOOGLE_CLIENT_SECRET=\nGOOGLE_REDIRECT_URI=\n\n# To enable GitHub set the following:\nGITHUB_CLIENT_ID=\nGITHUB_CLIENT_SECRET=\nGITHUB_REDIRECT_URI=\n\n# To enable GitLab set the following:\nGITLAB_CLIENT_ID=\nGITLAB_CLIENT_SECRET=\nGITLAB_REDIRECT_URI=\n\n# To enable Authentik set the following:\nAUTHENTIK_BASE_URL=\nAUTHENTIK_CLIENT_ID=\nAUTHENTIK_CLIENT_SECRET=\nAUTHENTIK_REDIRECT_URI=\n\n# To enable Authelia set the following:\nAUTHELIA_BASE_URL=\nAUTHELIA_CLIENT_ID=\nAUTHELIA_CLIENT_SECRET=\nAUTHELIA_REDIRECT_URI=\n\n# To enable Keycloak set the following:\nKEYCLOAK_CLIENT_ID=\nKEYCLOAK_CLIENT_SECRET=\nKEYCLOAK_REDIRECT_URI=\nKEYCLOAK_BASE_URL=\nKEYCLOAK_REALM=\n\n# To enable PocketId set the following:\nPOCKETID_BASE_URL=\nPOCKETID_CLIENT_ID=\nPOCKETID_CLIENT_SECRET=\nPOCKETID_REDIRECT_URI=\n</code></pre> <p>Here's an example of how to enable Authentik SSO:</p> docker-compose.yml<pre><code>bar-assistant:\n    environment:\n        - AUTHENTIK_BASE_URL=https://your-autentik.instance.com\n        - AUTHENTIK_CLIENT_ID=jYIXGY9QhEUWMpOCxo62wIwnOOKA32378MvtqZSA\n        - AUTHENTIK_CLIENT_SECRET=Fe2q5Zkjb1xK3eM0tSgMUu8P72bKniGTcygxDVmM2UQcThY9GZhY8UYsaywk9bSkadlADVjU7Aj1aRkKqKyB1ASaaMNXPexlrr40zWxyvJIN4eMxcUvuVYvYX9iG9qt\n        - AUTHENTIK_REDIRECT_URI=https://mybar.local.com/oauth/callback\n</code></pre> <p>Warning</p> <p>If you're using Salt Rim, set it to <code>{your-bar-domain}/oauth/callback</code>.</p>"},{"location":"setup/sso/#sso-management","title":"SSO Management","text":"<p>Users are identified by their email address. If you already have an account, signing in via SSO will automatically link it to your existing account. You can view linked accounts on your profile page. If a new user signs in via SSO and doesn't have an account, one will be created automatically.</p>"}]}